name: E2E Load Tests

on:
  # Run on main branch only (not every PR)
  push:
    branches: [main]
  # Allow manual trigger
  workflow_dispatch:
  # Run nightly at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

jobs:
  e2e-load:
    name: E2E Load Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: hotwind
          POSTGRES_USER: hotwind_user
          POSTGRES_PASSWORD: hotwind_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Initialize database schema
        run: PGPASSWORD=hotwind_pass psql -h localhost -U hotwind_user -d hotwind -f scripts/schema.sql

      - name: Load seed data
        run: PGPASSWORD=hotwind_pass psql -h localhost -U hotwind_user -d hotwind -f scripts/seed-data.sql

      - name: Build API
        run: dotnet build src/HotWind.Api --configuration Release

      - name: Start API in background
        run: |
          cd src/HotWind.Api
          dotnet run --no-build --configuration Release &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "API started with PID $API_PID"

          # Wait for API to be ready
          echo "Waiting for API to be ready..."
          timeout 30 bash -c 'until curl -sf http://localhost:5280/health; do sleep 2; done' || {
            echo "API failed to start within 30 seconds"
            exit 1
          }
          echo "API is ready for load testing!"
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=hotwind;Username=hotwind_user;Password=hotwind_pass"
          ASPNETCORE_URLS: "http://+:5280"
          ASPNETCORE_ENVIRONMENT: "Production"

      - name: Setup k6
        uses: grafana/setup-k6-action@v1
        with:
          k6-version: '1.3.0'

      - name: Create results directory
        run: mkdir -p tests/e2e/results

      - name: Run load tests
        run: k6 run tests/e2e/load-tests.js
        env:
          API_BASE_URL: http://localhost:5280

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-load-results-${{ github.run_number }}
          path: tests/e2e/results/*
          retention-days: 7

      - name: Comment on commit with load test results
        if: always() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'tests/e2e/results/load-summary.json';

            if (!fs.existsSync(summaryPath)) {
              console.log('Summary file not found, skipping comment');
              return;
            }

            const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            const metrics = summary.metrics;

            const httpReqDuration = metrics.http_req_duration;
            const httpReqFailed = metrics.http_req_failed;
            const httpReqs = metrics.http_reqs;

            const body = `## 📊 Load Test Results

            **Test Configuration:**
            - VUs: 10
            - Duration: 30s
            - Target: Read-only endpoints

            **Performance Metrics:**
            - Total Requests: ${httpReqs.values.count}
            - Request Rate: ${httpReqs.values.rate.toFixed(2)} req/sec
            - Error Rate: ${(httpReqFailed.values.rate * 100).toFixed(2)}%

            **Response Times:**
            - p50: ${httpReqDuration.values['p(50)'].toFixed(2)}ms
            - p95: ${httpReqDuration.values['p(95)'].toFixed(2)}ms
            - p99: ${httpReqDuration.values['p(99)'].toFixed(2)}ms

            **Thresholds:**
            ${httpReqFailed.thresholds['rate<0.01'].ok ? '✅' : '❌'} Error rate < 1%
            ${httpReqDuration.thresholds['p(95)<2000'].ok ? '✅' : '❌'} p95 < 2000ms
            ${httpReqDuration.thresholds['p(99)<3000'].ok ? '✅' : '❌'} p99 < 3000ms

            [View detailed results in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });

      - name: Stop API
        if: always()
        run: |
          if [ -n "$API_PID" ]; then
            echo "Stopping API (PID $API_PID)"
            kill $API_PID 2>/dev/null || true
          fi
