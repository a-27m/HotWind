name: Build, Test, and Release

on:
  workflow_dispatch:    
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: '9.0.x'
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: number27

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for semantic versioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: test-results
          path: '**/test-results.trx'

  semantic-version:
    name: Determine Semantic Version
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version: ${{ steps.semver.outputs.version }}
      tag: ${{ steps.semver.outputs.tag }}
      should_release: ${{ steps.semver.outputs.should_release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Calculate semantic version
        id: semver
        run: |
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Parse version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Get commits since last tag
          COMMITS=$(git log $LATEST_TAG..HEAD --oneline 2>/dev/null || git log --oneline)

          # Determine version bump based on conventional commits
          BREAKING=false
          FEATURE=false
          FIX=false

          while IFS= read -r commit; do
            if echo "$commit" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.*\))?!:"; then
              BREAKING=true
            elif echo "$commit" | grep -qE "BREAKING CHANGE"; then
              BREAKING=true
            elif echo "$commit" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.*\))?:"; then
              FEATURE=true
            elif echo "$commit" | grep -qE "^[a-f0-9]+ (fix|bugfix)(\(.*\))?:"; then
              FIX=true
            fi
          done <<< "$COMMITS"

          # Calculate new version
          if [ "$BREAKING" = true ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$FEATURE" = true ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$FIX" = true ]; then
            PATCH=$((PATCH + 1))
          else
            # No semantic commit, increment patch
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"

          # Check if version changed
          if [ "$LATEST_TAG" = "$NEW_TAG" ]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

  build-and-push-images:
    name: Build and Push ${{ matrix.image }} Image
    runs-on: ubuntu-latest
    needs: semantic-version
    if: needs.semantic-version.outputs.should_release == 'true'
    strategy:
      matrix:
        include:
          - image: api
            component: HotWind.Api
            dockerfile: ./src/HotWind.Api/Dockerfile
            description: API
          - image: cli
            component: HotWind.Cli
            dockerfile: ./src/HotWind.Cli/Dockerfile
            description: CLI
            major_only: true

    steps:
      - name: Check if CLI build should run
        id: should-build
        run: |
          VERSION="${{ needs.semantic-version.outputs.version }}"
          IS_MAJOR_RELEASE=false

          # Check if this is a major release (version ends with .0.0)
          if [[ "$VERSION" == *.0.0 ]]; then
            IS_MAJOR_RELEASE=true
          fi

          # For CLI, only build on major releases
          if [[ "${{ matrix.major_only }}" == "true" ]] && [[ "$IS_MAJOR_RELEASE" != "true" ]]; then
            echo "Skipping CLI build - not a major release"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.should-build.outputs.should_build == 'true'
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        if: steps.should-build.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.should-build.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        if: steps.should-build.outputs.should_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/hotwind-${{ matrix.image }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.semantic-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.semantic-version.outputs.version }}
            type=raw,value=latest

      - name: Build and push ${{ matrix.description }} image
        if: steps.should-build.outputs.should_build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/hotwind-${{ matrix.image }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/hotwind-${{ matrix.image }}:buildcache,mode=max
          build-args: |
            VERSION=${{ needs.semantic-version.outputs.version }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [semantic-version, build-and-push-images]
    if: needs.semantic-version.outputs.should_release == 'true'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create and push git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ needs.semantic-version.outputs.tag }} -m "Release ${{ needs.semantic-version.outputs.tag }}"
          git push origin ${{ needs.semantic-version.outputs.tag }}

      - name: Determine CLI build status
        id: cli-status
        run: |
          VERSION="${{ needs.semantic-version.outputs.version }}"
          if [[ "$VERSION" == *.0.0 ]]; then
            echo "CLI image was built for this major release"
            echo "cli_built=true" >> $GITHUB_OUTPUT
          else
            echo "CLI image was not built (not a major release)"
            echo "cli_built=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.semantic-version.outputs.tag }}
          name: Release ${{ needs.semantic-version.outputs.tag }}
          body: |
            ## Docker Images

            - `${{ env.DOCKERHUB_USERNAME }}/hotwind-api:${{ needs.semantic-version.outputs.version }}`
            ${{ steps.cli-status.outputs.cli_built == 'true' && format('- `{0}/hotwind-cli:{1}`', env.DOCKERHUB_USERNAME, needs.semantic-version.outputs.version) || '- CLI image not built (only built for major releases x.0.0)' }}

            ## Changes

            See commit history for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
